<?php

function area_entity_info() {
    $area_info['area'] = array(
        'label' => 'Area name',
        'controller class' => 'AreaController',
	    'base table' => 'areas',
		'label callback' => 'area_label',
        'uri callback' => 'area_uri',
        'fieldable' => true,
		'module' => 'area',
        'entity keys' => array(
            'id' => 'aid',
			'name' => 'name',
        ),
        'static cache' => true,
        'bundles' => array(
            'area' => array(
                'label' => 'Area Name',
                'admin' => array(
                    'path' => 'admin/structure/area/manage',
                    'access arguments' => array('administer areas'),
                ),
            ),
        ),
        'view modes' => array(
            'full' => array(
                'label' => 'Areas',
                'custom settings' => false,
            ),
        )
    );
    
    return $area_info;
}

function area_uri($area) {
    return array(
        'path' => 'area/' . $area->id
    );
}

function area_label($area) {
    return $area->name;
}

function area_load($aid = null, $reset = false) {
    $aids = (isset ($aid) ? array($aid) : array());
    $area = area_load_multiple($aids, $reset);
    return $area ? reset($area) : false;
}

function area_load_multiple($aids = array(), $conditions = array(), $reset = false) {
    return entity_load('area', $aids, $conditions, $reset);
}

function area_save($area) {
    return entity_get_controller('area')->save($area);
}

function area_permission() {
    return array(
        'administer areas' => array(
            'title' => 'Administer areas',
            'restrict access' => true,
        ),
        'view areas' => array(
            'title' => 'View areas'
        ),
        'create area' => array(
            'title' => 'Create areas'
        )
    );
}

function area_menu() {
    $items['admin/structure/area/manage'] = array(
        'title' => 'Area admin',
        'description' => 'Manage area structure',
        'page callback' => 'area_info',
        'access arguments' => array('administer areas'),
    );
    
    $items['area/%area'] = array(
        'title callback' => 'area_page_title',
        'title arguments' => array(1),
        'page callback' => 'area_view',
        'page arguments' => array(1),
        'access arguments' => array('view areas'),
        'type' => MENU_CALLBACK
    );
    
     $items['area/%area/edit'] = array(
        'title callback' => 'area_page_title',
        'title arguments' => array(1),
        'page callback' => 'area_edit',
        'page arguments' => array(1),
        'access arguments' => array('view areas'),
        'type' => MENU_CALLBACK
    );
    
    $items['area/add'] = array(
        'title' => 'Add area',
        'page callback' => 'area_add',
        'access arguments' => array('create area')
    );
    
    return $items;
}

function area_info() {
    return 'Welcome to the administration page for your areas!';
}

function area_page_title($area) {
    return $area->name;
}

function area_view($area, $view_mode = 'full') {
    $area->content['latitude'] = array(
         '#markup' => $area->latitude, 
         '#weight' => 1,
         );
    $area->content['longitude'] = array(
    '#markup' => $area->longitude, 
    '#weight' => 1,
         );
    // Build fields content
    field_attach_prepare_view('area', array($area->aid => $area), $view_mode);
    entity_prepare_view('area', array($area->aid => $area));
    $area->content += field_attach_view('area', $area, $view_mode);
    
    return $area->content;
}

function area_edit($area){
  return drupal_get_form('area_add_form', $area);
}

function area_field_extra_fields() {
    $return = array();
    $return['area']['area'] = array(
        'form' => array(
            'name' => array(
                'label' => 'Name',
                'description' => 'area name',
				'weight' => 0,
            ),
			'description' => array(
                'label' => 'Description',
                'description' => 'description',
				'weight' => 1,
            ),
			'latitude' => array(
                'label' => 'Latitude',
                'description' => 'latitude',
				'weight' => 2,
            ),
			'longitude' => array(
                'label' => 'Longitude',
                'description' => 'longitude',
				'weight' => 3,
            ),			
			'parent' => array(
                'label' => 'Parent',
                'description' => 'Is this area a parent',
				'weight' => 5,
            ),
        )
    );
    
    return $return;
}

function area_add() {
    $area = (object) array(
        'aid' => '',
        'type' => 'area',
        'name' => ''
    );
    
    return drupal_get_form('area_add_form', $area);
}


function area_add_form($form, $form_state, $area) {
    drupal_add_js('http://maps.google.com/maps/api/js?sensor=true',array('type' => 'external','weight' => -200));
    drupal_add_js('http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js',array('type' => 'external','defer' =>TRUE));
	
	$options = array('1' => t('Yes'), '0' => t('No'));
	
    $form['name'] = array(
        '#type' => 'textfield',
        '#title' => 'Name',
        '#default_value' => isset($area->name) ? $area->name : '',
        '#required' => true,
		'#weight' => 0
    );
	
	 $form['description'] = array(
   		'#type' => 'textarea',
  	    '#title' => t('Describe it'),
        '#default_value' => isset($area->description) ? $area->description : '',
        '#cols' => 60,
        '#rows' => 5,
        '#description' => t('Area description.'),
   );
  
	$form['parent'] = array(
       	'#type' => 'radios',
        '#title' => 'Does this area have sub areas?',
        '#default_value' => isset($area->parent) ? $area->parent : '',
        '#required' => false,
		'#weight' => 0,
	    '#options' => $options,
    );
  
	 $form['latitude'] = array(
        '#type' => 'textfield',
        '#title' => t('Latitude'),
        '#default_value' => isset($area->latitude) ? $area->latitude : '',
        '#size' => 16,
        '#maxlength' => 20,
        
    );
	
	 $form['longitude'] = array(
        '#type' => 'textfield',
        '#title' => t('Longitude'),
        '#default_value' => isset($area->longitude) ? $area->longitude : '',
        '#size' => 16,
        '#maxlength' => 20,
        
    );	
		
    $form['actions'] = array(
        '#type' => 'actions'
    );
    
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save')
    );
    
    field_attach_form('area', $area, $form, $form_state);
    
    return $form;
}

function area_add_form_validate($form, $form_state) {
    $area_submission = (object)$form_state['values'];
    field_attach_form_validate('area', $area_submission, $form, $form_state);
}

function area_add_form_submit($form, $form_state) {
    $area_submission = (object) $form_state['values'];
    field_attach_submit('area', $area_submission, $form, $form_state);
    $area = area_save($area_submission);
    $form_state['redirect'] = "area/$area->aid";
}

/**
 * Implement hook_theme().
 */
function area_theme() {
  return array(
//    'area_add_list' => array(
//      'variables' => array('content' => array()),
//      'file' => 'model.admin.inc',
//    ),
    'area' => array(
      'render element' => 'elements',
      'template' => 'area',
    ),
   'area_sample_data' => array(
      'variables' => array('area_sample_data', 'area' => NULL),
      'template' => 'area-area-data',
    ),


  );
} 

/**
  * Implements hook_views_api().
 */
function area_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'area') . '/views',
  );
}

function area_form_alter($form, $form_state, $form_id)  {
      switch ($form_id)  {
  	 	case 'area_add_form':
  	 		$form['latitude']['#default_value'] = isset($_GET["lat"]) ? htmlspecialchars($_GET["lat"]) : '';
			$form['longitude']['#default_value'] = isset($_GET["lng"]) ? htmlspecialchars($_GET["lng"]) : '';
			$form['field_area_parent']['und']['#default_value'] = isset($_GET["parent"]) ?htmlspecialchars($_GET["parent"]) : '';
        // print_r($form['field_area_parent']['und'][0]);

  	 		break;
  	 }
  }

